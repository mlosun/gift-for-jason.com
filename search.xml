<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用 Hexo &amp; Github Actions 搭建博客</title>
      <link href="/archives/shi-yong-hexo-github-actions-da-jian-bo-ke.html"/>
      <url>/archives/shi-yong-hexo-github-actions-da-jian-bo-ke.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Hexo-amp-Github-Actions-搭建博客"><a href="#使用-Hexo-amp-Github-Actions-搭建博客" class="headerlink" title="使用 Hexo &amp; Github Actions 搭建博客"></a>使用 Hexo &amp; Github Actions 搭建博客</h1><blockquote><p>案例博客：<a href="https://gift-for-jason.com/">Jason的礼物</a>，一个记录怎么鸡娃的成长日记。<a href="https://github.com/mlosun/gift-for-jason.com">Github</a></p></blockquote><h2 id="方案概述"><a href="#方案概述" class="headerlink" title="方案概述"></a>方案概述</h2><p>一直认为在 Github 上搭建静态博客是一件很省<del>钱</del>心的事情，不需要去操心服务器到期、各种配置，并且 Github 也已经到了大而不倒（至少很难）的地步了吧。试过不少静态博客方案，也看过不少 Github Actions 的教程，最终结合自己的思路整理出来一套超简单的 Hexo &amp; Github Actions 搭建博客方案。</p><ul><li>710搭建：只需要简单7个步骤，10min即可搭建自动化部署的 Hexo 博客</li><li>单库管理：Hexo源文件和静态文件在同一个 Github 仓库中管理，便于备份</li></ul><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><blockquote><p>下文中请自行将<code>mlosun</code>、<code>HexoBlog</code>修改为你的用户名及项目名称。</p></blockquote><h4 id="Step-1-安装程序"><a href="#Step-1-安装程序" class="headerlink" title="Step.1 安装程序"></a>Step.1 安装程序</h4><p>在安装Hexo之前，需要先安装依赖程序 <a href="http://nodejs.org/">Node.js</a> &amp; <a href="http://git-scm.com/">Git</a>，在官网上下载最新版本安装即可。</p><p>随后只需要打开终端，使用npm命令一键安装Hexo即可。</p><pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Step-2-Github-设置"><a href="#Step-2-Github-设置" class="headerlink" title="Step.2 Github 设置"></a>Step.2 Github 设置</h4><p>登录<a href="https://github.com/">Github</a>，创建一个新的项目仓库（例如：<code>https://github.com/mlosun/HexoBlog.git</code>）。</p><p>随后在终端使用命令 <code>ssh-keygen -t rsa -C "mlosun"</code>创建新的 SSH key 一对公钥私钥，创建后可以在<code>~/.ssh</code>目录下找到它们，带有<code>.pub</code>的是公钥，另一个是私钥。</p><ul><li>在 Github 上的 Settings - SSH and GPG keys 中，创建一个新的 SSH key ，名称随意，将<strong>公钥</strong>内容复制进去</li><li>在当前项目仓库的 Settings - Secrets 中，创建一个新的 secret ，命名为<code>ACCESS_TOKEN</code>，<strong>私钥</strong>内容复制进去</li></ul><h4 id="Step-3-搭建博客"><a href="#Step-3-搭建博客" class="headerlink" title="Step.3 搭建博客"></a>Step.3 搭建博客</h4><p>回到本地，在你的工作目录新建存放 Hexo 文件的文件夹，进入该文件夹并初始化 Hexo 。</p><pre class="line-numbers language-none"><code class="language-none">hexo init HexoBlogcd HexoBlognpm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Step-4-配置Hexo部署"><a href="#Step-4-配置Hexo部署" class="headerlink" title="Step.4 配置Hexo部署"></a>Step.4 配置Hexo部署</h4><p>打开 HexoBlog 目录下的配置文件 <code>_config.yml</code>，配置deploy部分的内容如下。</p><pre class="line-numbers language-none"><code class="language-none">deploy:   type: git   repo: https://github.com/mlosun/HexoBlog.git # 你的 Github 仓库地址   branch: source<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Step-5-配置-Github-Actions"><a href="#Step-5-配置-Github-Actions" class="headerlink" title="Step.5 配置 Github Actions"></a>Step.5 配置 Github Actions</h4><p>在 HexoBlog 目录下新建文件夹<code>.github/workflows</code>（隐藏文件夹），新建文件<code>deploy.yml</code>，内容如下。</p><pre class="line-numbers language-none"><code class="language-none">name: Hexo Blog CI &amp; CDon:  push:    branches:      - source  # 存放 Hexo 源文件的分支jobs:  pages:    runs-on: ubuntu-latest    steps:      - uses: actions/checkout@v2      - name: Use Node.js 12.x        uses: actions/setup-node@v1        with:          node-version: '12.x'      - name: Cache NPM dependencies        uses: actions/cache@v2        with:          path: node_modules          key: ${{ runner.OS }}-npm-cache          restore-keys: |            ${{ runner.OS }}-npm-cache      - name: Install Dependencies        run: npm install      - name: Build        run: npm run build      - name: Deploy        uses: peaceiris/actions-gh-pages@v3        with:          github_token: ${{ secrets.GITHUB_TOKEN }} # 无需修改          deploy_key: ${{ secrets.ACCESS_TOKEN }}  # 添加 ACCESS_TOKEN          publish_dir: ./public  # hexo generate 生成的博客文件默认存放在 /public 目录下          publish_branch: main  # 存放展示的博客文件的分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Step-6-部署到-Github-Repositories"><a href="#Step-6-部署到-Github-Repositories" class="headerlink" title="Step.6 部署到 Github Repositories"></a>Step.6 部署到 Github Repositories</h4><p>终端切换到 HexoBlog 目录下，依次执行以下命令。</p><pre class="line-numbers language-none"><code class="language-none">git init  # 初始化gitgit add .  # 添加全部文件到暂存区git commit -m "first commit"  # 提交暂存区文件git branch -M source  # 分支重命名为 sourcegit remote add origin https://github.com/mlosun/HexoBlog.git  # 连接远端仓库git push -u origin source  # 推送到远端仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Step-7-配置-Github-Pages"><a href="#Step-7-配置-Github-Pages" class="headerlink" title="Step.7 配置 Github Pages"></a>Step.7 配置 Github Pages</h4><p>回到 Github 仓库中，在 Settings - Pages 中，选择<code>main</code>分支</p><blockquote><p>若要绑定自有域名，需要创建 <code>HexoBlog/source/CNAME</code>文件，内容填写域名即可。在 Settings - Pages 中绑定的域名在下一次自动部署后会被覆盖。</p></blockquote><p>到此，查看 Github 的仓库，已经有了两个分支<code>main</code> 和 <code>source</code>，并且后续在<code>source</code>分支做的更新都会自动部署到<code>main</code> 分支内。而<code>main</code> 则通过 Github Pages 服务展示你的博客。</p><h2 id="日常更新"><a href="#日常更新" class="headerlink" title="日常更新"></a>日常更新</h2><h4 id="简单更新"><a href="#简单更新" class="headerlink" title="简单更新"></a>简单更新</h4><p>可以直接在 Github 的仓库中编辑 <code>source</code>分支，保存提交后Github Actions 会自动部署。</p><h4 id="复杂更新"><a href="#复杂更新" class="headerlink" title="复杂更新"></a>复杂更新</h4><p>为了减少一些莫名其妙的事情发生，建议每次在进行复杂一些的更新时，删除掉本地的仓库文件，从 Github 上重新 clone 仓库到本地：</p><pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/mlosun/HexoBlog.gitgit checkout source# 切换到 source 分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>更新时可以在本地使用Hexo服务器进行预览：</p><pre class="line-numbers language-none"><code class="language-none">hexo d# 生成静态文件hexo s# 启动Hexo服务器，默认预览地址http://localhost:4000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>更新后推送到 Github 仓库时，建议清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)</p><pre class="line-numbers language-none"><code class="language-none">hexo clean# 清除缓存git add .  # 添加全部文件到暂存区git commit -m "update"  # 提交暂存区文件git push -u origin source  # 推送到远端仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.towind.fun/2019/12/26/hello-hexo-world/">Hello Hexo World</a></li><li><a href="https://blog.towind.fun/2021/02/18/hexo-github-actions-ci-cd/">使用 Github Actions 持续集成与部署 Hexo 博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> Github Actions </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
